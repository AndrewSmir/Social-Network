{"version":3,"sources":["assets/img/user.jpeg","api/api.js","redux/dialogs-reducer.js","components/nav/Friends/Friends.module.css","assets/img/Spinner-1s-200px.svg","components/header/img/logo.png","components/nav/Nav.module.css","serviceWorker.js","components/nav/Nav.jsx","components/settings/Settings.jsx","components/news/News.jsx","redux/users-reducer.js","components/Users/Users.jsx","redux/user-selectors.js","components/Users/UsersContainer.jsx","components/header/Header.jsx","redux/auth-reducer.js","components/header/HeaderContainer.jsx","components/Login/LoginForm.jsx","components/Login/Login.jsx","redux/app-reducer.js","redux/sidebar-reducer.js","redux/redux-store.js","App.js","index.js","utils/validators/validators.js","components/common/Preloader/Preloader.jsx","components/common/FormsControl/FormsControl.module.css","components/common/FormsControl/FormsControls.jsx","components/Users/Users.module.css","components/header/Header.module.css","redux/profile-reducer.js"],"names":["module","exports","instance","axios","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","followUser","userId","post","unfollowUser","delete","loginAPI","login","signIn","loginData","email","password","rememberMe","captcha","logout","getCaptchaURL","profileAPI","setProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profileData","initialState","dialogsData","id","name","imgSrc","messagesData","message","dialogsReducer","state","action","type","stateCopy","newMessage","newMessageText","push","addMessageActionCreator","Boolean","window","location","hostname","match","Nav","props","className","styles","nav","item","activeClassName","activeLink","to","Settings","News","users","totalUsersCount","isFetching","followingInProgress","usersReducer","map","user","userID","followed","count","filter","changeFollow","toggleFollowingProgress","Users","useState","curPage","setCurPage","useEffect","pagesCount","Math","ceil","pages","i","page","slice","selectedPage","key","onClick","setPage","userItem","usersPage","src","photos","small","userPhoto","disabled","some","setPreviousPage","setNextPage","getIsFetching","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","UsersContainer","pageNumber","setCurrentPage","this","Preloader","React","Component","compose","connect","dispatch","a","userAPI","items","totalCount","getUsersTC","resultCode","alert","followUserTC","unfollowUserTC","Header","header","require","alt","loginBlock","auth","isAuth","SET_USER_DATA","SET_CAPTCHA_URL","captchaURL","authReducer","payload","url","setUserData","getAuthUserDataTC","getCaptchaURLTC","HeaderContainer","maxLength30","maxLength","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","requiredField","typeField","error","formSummaryError","messages","stopSubmit","_error","signInTC","console","log","initialized","initiateState","sidebarReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducersButch","combineReducers","dialogsPage","profilePage","profileReducer","sideBar","formReducer","appReducer","store","createStore","applyMiddleware","thunk","Window","prototype","DialogsContainer","lazy","ProfileContainer","App","initializeApp","Suspense","fallback","path","render","ComposedApp","promise","Promise","all","MainApp","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","value","length","preloader","FormControl","input","meta","hasError","touched","formControl","children","Textarea","restProps","ADD_POST","DELETE_POST","postData","likes","profile","profileStatus","newPost","newPostText","postId","addPostActionCreator","setUserProfileStatus","setProfileTC","getProfileStatusTC","updateProfileStatusTC","savePhotoTC","file","saveProfileTC","getState"],"mappings":"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","file":"static/js/main.3f7b8775.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.c5e95871.jpeg\";","import * as axios from \"axios\";\r\n\r\n//Создаем Data Access Layer - слой доступа к данным\r\n\r\nconst instance = axios.create({ //создаем инстанс нашего запроса. Это функция, которая возвращает нам объект с настройками запроса.\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/', //это значение будет автоматически подставляться в начало url строки (первым параметром, например, перед users?page=.....)\r\n    withCredentials: true,\r\n    headers: { //HEADERS -\r\n        'API-KEY':'2aa9b183-f48f-4118-9c56-db5dfd5a00b4'}, //Все запросы, кроме get требуют ключ доступа.\r\n})\r\n\r\n/*\r\nПосле того, как мы создали инстанс, мы делаем запросы не через axios, а через инстанс,\r\nт.е. не axios.get, а instance.get\r\n */\r\n\r\nexport const usersAPI = {\r\n     getUsers(currentPage, pageSize) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n            return response.data //Возвращаем не весь response, а только нуные нам данные. Заголовки, и д.р. - не нужно\r\n        })\r\n    },\r\n    followUser(userId) {\r\n        return instance.post(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    unfollowUser(userId){\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\nexport const loginAPI = {\r\n    login(){\r\n        return instance.get(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n\r\n    signIn(loginData){\r\n        return instance.post('auth/login', {email: loginData.email, password: loginData.password, rememberMe: loginData.rememberMe, captcha: loginData.captcha})\r\n            .then(response=>response.data)\r\n    },\r\n\r\n    logout(){\r\n        return instance.delete('auth/login')\r\n            .then(response=>response.data)\r\n    },\r\n\r\n    getCaptchaURL(){\r\n        return instance.get('security/get-captcha-url')\r\n            .then(response=>response.data)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    setProfile(userId){\r\n        return instance.get(`profile/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userId){\r\n        return instance.get(`profile/status/${userId}`)\r\n            .then(response=>response.data)\r\n    },\r\n    updateStatus(status){\r\n        return instance.put(`profile/status`, {status: status}) //вторым параметром в put запросе можно отправлять тело запроса. В конфигурации api заложено, что в теле запроса должен прийти объект со свойством status.\r\n            .then(response=>response.data)\r\n    },\r\n    savePhoto(photoFile){\r\n        let formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put('profile/photo', formData, {\r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        } )\r\n    },\r\n    saveProfile(profileData){\r\n        return instance.put(`profile`, profileData)\r\n    }\r\n}","const ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nconst initialState = { // добавляем значение state по умолчанию, оно нужно для инициализации state при запуске приложения. Иначе state будет undefined и наш store не создастся. Детали есть в redux-store\r\n    dialogsData: [\r\n        {\r\n            id: \"1\",\r\n            name: 'Dimych',\r\n            imgSrc: 'https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png'\r\n        },\r\n        {\r\n            id: \"2\",\r\n            name: 'Андрей',\r\n            imgSrc: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png'\r\n        },\r\n        {id: \"3\", name: 'Михалыч', imgSrc: 'https://imgur.com/I80W1Q0.png'},\r\n        {id: \"4\", name: 'Витек', imgSrc: 'https://image.freepik.com/free-vector/_9385-36.jpg'}\r\n    ],\r\n\r\n    messagesData: [\r\n        {id: \"1\", message: 'hi'},\r\n        {id: \"1\", message: 'hi how are you'},\r\n        {id: \"1\", message: 'I\\'m fine'},\r\n        {id: \"1\", message: 'Витек'}\r\n    ],\r\n}\r\n\r\n//Reducer - чистая функция, которая принимает state, action и возвращает новое состояние state. Если action.type не удовлетворяет условию, то возвращает переданный state\r\n\r\nconst dialogsReducer = (state = initialState, action) => { //action - объект, у которого как минимум есть type\r\n    switch (action.type) {\r\n\r\n        case ADD_MESSAGE: {\r\n            const stateCopy = {...state}\r\n\r\n            const newMessage = {\r\n                id: \"33\", message: action.newMessageText\r\n            };\r\n            stateCopy.messagesData = [...state.messagesData] //Массив - это тот же объект и он также хранится по ссылке, поэтому мы точно так же должны создать копию этого объекта, чтобы connect мог следить за изменением объекта и сравнивать его новое и старое состояние\r\n            stateCopy.messagesData.push(newMessage);\r\n            return stateCopy;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default dialogsReducer\r\nexport const addMessageActionCreator = (newMessageText) => ({type: ADD_MESSAGE, newMessageText})\r\n\r\n/*\r\nЗачем мы делаем копию state?\r\nВо первых - копия state нужна нам для ререндера компонента.\r\nСмысл в том, что объекты хранятся в памяти не по значению, а по ссылке и, если мы будем менять state, который мы передали в reducer, то будет меняться и наш первоначальный state.\r\nФункция connect (детали в dialogsContainer) для ререндера должна сравнить 2 состояния объекта: старое и новое, если что-то поменялось, то запустится ререндер объекта.\r\nНо, т.к. state получается один и тот же, что до изменения состояния, что после (т.к. одна и та же ссылка на объект), то перерендер не будет запущен, даже не смотря на то, что по факту мы добавляем новую информацию\r\n\r\nКак решить эту проблему?\r\n\r\nМы делаем копию state, которую передаем в reducer и получаем новую ссылку, в которой будет хранится наш новый объект.\r\nВ дальнейшем connect будет сравнивать первоначальный state и его копию (НО не объект целиком, а его свойства и значения этих свойств) и, если найдет отличия, то запустит перерендер.\r\n\r\nПочему значения свойств? Потому, что 2 объекта никогда не будут равны, если это не хранятся по одной и той же ссылке (другими словами - не один и тот же объект).\r\nА вот значения свойств этих объектов могут быть равны.\r\n\r\nВо вторых.\r\nЕсли мы меняем state, который передаем в функцию, то это нарушает принцип чистых функций\r\nНазывается он - имьютабельность. Мы не имеем права модифицировать входящие параметры напрямую\r\n */","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friends_friend__3iLqE\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.9064981b.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.b4b06117.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__2KbBC\",\"item\":\"Nav_item__2_IHf\",\"activeLink\":\"Nav_activeLink__2kKey\",\"friends\":\"Nav_friends__3JIqF\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styles from './Nav.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Friends from \"./Friends/Friends\";\r\n\r\nfunction Nav(props){\r\n\r\n    return (<nav className={styles.nav}>\r\n        <ul>\r\n            <li className={styles.item}><NavLink activeClassName={styles.activeLink} to=\"/profile\">Profile</NavLink></li>\r\n            <li className={styles.item}><NavLink activeClassName={styles.activeLink} to=\"/dialogs\">Dialogs</NavLink></li>\r\n            <li className={styles.item}><NavLink activeClassName={styles.activeLink} to=\"/users\">Users</NavLink></li>\r\n            <li className={styles.item}><NavLink activeClassName={styles.activeLink} to=\"/news\">News</NavLink></li>\r\n            <li className={styles.item}><NavLink activeClassName={styles.activeLink} to=\"/settings\">Settings</NavLink></li>\r\n        </ul>\r\n    </nav>)\r\n}\r\n\r\n//Navlink - встроенная в react компонента. Изменяет url в браузере на значение, которое мы указываем в to={то, на что изменится текст в строке браузера}\r\n//При компиляции Navlink меняется на тег <a> (ссылка), но при этом у нее отключено дефолтное поведение по редиректу на другую страницу. Остается лишь изменение строки в браузере без перехода.\r\n//Navlink не меняет содержимое страницы. Navlink отвечает только за изменение текста в строке браузера.\r\n//За изменение содержимого страницы будет следить другая компонента - Route.\r\n\r\nexport default Nav;\r\n\r\n","import React from \"react\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import {usersAPI as userAPI} from \"../api/api\";\r\n\r\nconst CHANGE_FOLLOW = 'CHANGE_FOLLOW';\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst SET_PREVIOUS_PAGE = 'SET_PREVIOUS_PAGE'\r\nconst SET_NEXT_PAGE = 'SET_NEXT_PAGE'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING = 'TOGGLE_IS_FOLLOWING'\r\n\r\nconst initialState = {\r\n    users: [],\r\n    pageSize: 3, //Значения нужны для определения постраничного вывода.\r\n    totalUsersCount: null,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n\r\n} // добавляем значение state по умолчанию, оно нужно для инициализации state при запуске приложения. Иначе state будет undefined и наш store не создастся\r\n\r\nconst usersReducer = (state = initialState, action) => { //Reducer - функция, через которую идет модификация state\r\n    switch (action.type) {\r\n        case CHANGE_FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => user.id === action.userID ? {...user, followed: !user.followed} : user) //Через users.map() делаем глубокую копию объектов, которые находятся в массиве.\r\n                //нам не нужно делать копию каждого объекта, а только того, который мы будем изменять. Как понять, какой объект изменяем? Для этого в action нам будет приходить свойство userID\r\n                // по значению этого свойства мы и узнаем, копию какго элемента массива объектов мы должны сделать.\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users] //Добавляем в копию массива\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n\r\n        case SET_PREVIOUS_PAGE:\r\n            if (state.currentPage !== 1) {\r\n                return {\r\n                    ...state, currentPage: state.currentPage - 1\r\n                }\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case SET_NEXT_PAGE:\r\n            return {\r\n                ...state, currentPage: state.currentPage + 1\r\n            }\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.count\r\n            }\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: !state.isFetching\r\n            }\r\n\r\n        case TOGGLE_IS_FOLLOWING:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\n///Action Creators///\r\nexport const changeFollow = (userID) => ({type: CHANGE_FOLLOW, userID});\r\nexport const setUsers = (users) => ({type: SET_USERS, users}); //Это AC будет формировать action по загрузке пользователей\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount});\r\nexport const toggleIsFetching = () => ({type: TOGGLE_IS_FETCHING})\r\nexport const setPreviousPage = () => ({type: SET_PREVIOUS_PAGE});\r\nexport const setNextPage = () => ({type: SET_NEXT_PAGE});\r\nexport const toggleFollowingProgress = (isFetching, userId) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING, isFetching, userId\r\n    }\r\n}\r\n\r\n///Thunk///\r\n\r\nexport const getUsersTC = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching())\r\n        const response = await userAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching())\r\n        dispatch(setUsers(response.items))\r\n        dispatch(setTotalUsersCount(response.totalCount))\r\n\r\n    }\r\n}\r\n\r\nexport const followUserTC = (userId) => async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    try {\r\n        const data = await userAPI.followUser(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(changeFollow(userId))\r\n        }\r\n    } catch {\r\n        alert('Please, login')\r\n    } finally {\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const unfollowUserTC = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        const data = await userAPI.unfollowUser(userId)\r\n                if (data.resultCode === 0) {\r\n                    dispatch(changeFollow(userId))\r\n                    dispatch(toggleFollowingProgress(false, userId))\r\n                }\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/img/user.jpeg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Users = (props) => {\r\n\r\n    const [curPage, setCurPage] = useState(1)\r\n\r\n    useEffect(()=>{\r\n        if (props.currentPage>=10){\r\n            setCurPage(props.currentPage - props.currentPage%10)\r\n        }\r\n    }, [props.currentPage])\r\n\r\n\r\n    const pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const page = pages.slice(curPage - 1, curPage + 10).map(page => {\r\n        return <span className={props.currentPage === page ? styles.selectedPage : null} id={page} key={page}\r\n                     onClick={() => props.setPage(page)}>{page}</span>\r\n    })\r\n\r\n\r\n    const userItem = props.usersPage.map(user =>\r\n        <div key={user.id}>\r\n            <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={`/profile/${user.id}`}>\r\n                    <img src={user.photos.small ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                   <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                           onClick={() => {\r\n                               if (!user.followed) {\r\n                                   props.followUser(user.id)\r\n                               } else if (user.followed) {\r\n                                   props.unfollowUser(user.id)\r\n                               }\r\n                           }}\r\n                           id={user.id}>\r\n                        {user.followed && 'unfollow'}\r\n                       {!user.followed && 'follow'}\r\n                    </button>\r\n                </div>\r\n            </span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{'user.location.country'}</div>\r\n                    <div></div>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.pages}>\r\n                <div>\r\n                    {props.currentPage!== 1 && <span onClick={() => props.setPreviousPage()}>Previous Page</span>}\r\n                    {props.currentPage>= 11 && '...'}\r\n                    {page}\r\n                    ...\r\n                </div>\r\n                <span onClick={() => props.setNextPage()}>Next Page</span>\r\n            </div>\r\n            {userItem}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users\r\n\r\n","import {createSelector} from \"reselect\";\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getUsers = (state) => {\r\n    return state.usersPage.users\r\n}\r\n\r\n/*\r\nexport const getUserSupSel = createSelector(getUsers, getIsFetching, (users, fetching)=> {\r\n    return users.filter(u=>true)\r\n})\r\n */\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from \"react\";\r\nimport {\r\n    followUserTC, getUsersTC,\r\n    setCurrentPage, setNextPage, setPreviousPage, unfollowUserTC\r\n} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers, getUserSupSel\r\n} from \"../../redux/user-selectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    /* - было до Thunk\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching()\r\n        userAPI.getUsers(this.props.currentPage, this.props.pageSize)\r\n            .then(response => {\r\n                this.props.toggleIsFetching()\r\n                this.props.setUsers(response.items);\r\n                this.props.setTotalUsersCount(response.totalCount)\r\n            })\r\n    }\r\n     */\r\n\r\n    setPage = (pageNumber) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    setNextPage = () => {\r\n        this.props.setNextPage()\r\n        this.props.getUsers(this.props.currentPage + 1, this.props.pageSize)\r\n    }\r\n\r\n    setPreviousPage = () => {\r\n        this.props.setPreviousPage()\r\n        this.props.getUsers(this.props.currentPage - 1, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> :\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       setPage={this.setPage}\r\n                       usersPage={this.props.usersPage}\r\n                       currentPage={this.props.currentPage}\r\n                       setNextPage={this.setNextPage}\r\n                       setPreviousPage={this.setPreviousPage}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                       followUser={this.props.followUser}\r\n                       unfollowUser={this.props.unfollowUser}\r\n                />}\r\n        </>\r\n    }\r\n}\r\n\r\n/*\r\nconst mapStateToProps = (state) => { // connect (функция в самом низу) позволяет нам автоматически вытаскивать state из store. Т.е. он неявно вызывает store.getState() и возвращает нам актуальный state\r\n    return {\r\n        usersPage: state.usersPage.users, //Сюда мы передаем то, что будет указано у нас в качестве пропсов, которые мы передаем в презентационную компоненту. Т.е. в итоге мы полчим презентационную компоненту с пропсами <Dialogs dialogsPage={state.dialogsPage} />\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n};\r\n */\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        usersPage: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n        setCurrentPage: (currentPage) => {\r\n            dispatch(setCurrentPage(currentPage))\r\n        },\r\n        setNextPage: () => {\r\n            dispatch(setNextPage())\r\n        },\r\n        setPreviousPage: () => {\r\n            dispatch(setPreviousPage())\r\n        },\r\n\r\n        getUsers: (currentPage, pageSize) => {\r\n            dispatch(getUsersTC(currentPage, pageSize))\r\n        },\r\n\r\n        followUser: (userId) => {\r\n            dispatch(followUserTC(userId))\r\n        },\r\n\r\n        unfollowUser: (userId) => {\r\n            dispatch(unfollowUserTC(userId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    )(UsersContainer)\r\n\r\n/*\r\n//mapDispatchToProps мы можем заменить объектом и connect сам создаст функции обертки, куда будут заложены наши action-creator-ы\r\n\r\nexport default connect(mapStateToProps, {\r\n    changeFollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setNextPage,\r\n    setPreviousPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    toggleFollowingProgress\r\n})(UsersContainer)\r\n\r\n */\r\n//С помощью функции connect мы можем создать контейнерную компоненту.\r\n//Функция connect принимает в себя 2 параметра, которые представляют собой функции\r\n//Первая функция принимает в качестве параметров state (Обычно эту функцию называют mapStateToProps)\r\n//Вторая функция - dispatch (Обычно называют mapDispatchToProps)\r\n//В результате connect вернет нам функцию, которая в качестве параметра принимает в себя название компоненты,\r\n//вокруг которой мы хотим создать контейнерную компоненту.\r\n\r\n/*\r\nПомимо всего этого connect создает свой собственный subscribe, который будет следить, нужно ли компоненте перерисовываться или нет.\r\nКаждый раз, когда происходят изменения в state запускается функция mapStateToProps и формируется новый объект.\r\nновый объект сравнивается со старым объектом (его внутренние составляющие, т.к. объект не может быть равен другому объекту).\r\nЕсли ичего не меняется, то и компонента не перерисовывается\r\n */","import React from \"react\";\r\nimport styles from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <img src={require('./img/logo.png')} alt=\"LOGO\"/>\r\n            <div className={styles.loginBlock}>\r\n                {!props.auth.isAuth ? <NavLink to={'/login'}>Login</NavLink> : <div>\r\n                    <p>{props.auth.login}</p>\r\n                    <NavLink onClick={() => props.logout()}  className={styles.logout} to={'/login'}> Logout </NavLink>\r\n                </div>\r\n                }\r\n            </div>\r\n        </header>)\r\n}\r\n\r\nexport default Header;","import {loginAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = '@@auth-reducer/SET_USER_DATA';\r\nconst SET_CAPTCHA_URL = '@@auth-reducer/SET_CAPTCHA_URL'\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n    captchaURL: null // if null, then captcha is not required\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                captchaURL: action.url\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport default authReducer\r\n\r\n///Action Creators///\r\nexport const setUserData = (id, email, login, isAuth, captchaURL) => ({type: SET_USER_DATA, payload: {id, email, login, isAuth, captchaURL}})\r\nconst setCaptchaUrl = (url) => ({type: SET_CAPTCHA_URL, url})\r\n\r\n///Thunks///\r\n\r\nexport const getAuthUserDataTC = () => async (dispatch) => { //Задача Thunk - выполнить асинхранную операцию и результат этой операции передать в state через dispatch action-a\r\n    const data = await loginAPI.login()\r\n\r\n    if (data.resultCode === 0) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setUserData(id, email, login, true)) //Dispatch по умолчанию возвращает нам Promise\r\n    }\r\n}\r\n\r\nexport const signInTC = (loginData) => dispatch => {\r\n    loginAPI.signIn(loginData)\r\n        .then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(getAuthUserDataTC())\r\n            } else {\r\n                if (data.resultCode === 10) {\r\n                    dispatch(getCaptchaURLTC())\r\n                }\r\n                const message = data.messages[0]\r\n                let action = stopSubmit('login', {_error: message}) //actionCreator reduxform В stopSubmit мы передаем 2 параметра: 1 - название формы в нашем state-e (это название мы передаем в HOC reduxForm, когда оборачиваем нашу компоненту), вторым параметром - объект, в котором мы указываем проблемные свойства\r\n                dispatch(action)  //{_error:'Email is wrong'} свойство _error - показывает общую ошибку для всей формы, значение - описание этой ошибки. Описание ошибки попадает в качестве пропсов в валидируемую форму. Т.е. props.error будет выводить описание полученной ошибки.\r\n            }\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => dispatch => {\r\n    loginAPI.logout()\r\n        .then(data => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setUserData(null, null, null, false, null))\r\n            }\r\n        })\r\n}\r\n\r\nexport const getCaptchaURLTC = () => async dispatch => {\r\n    const data = await loginAPI.getCaptchaURL();\r\n    const captchaURL = data.url;\r\n    dispatch(setCaptchaUrl(captchaURL))\r\n}","import React, {Component} from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutTC} from \"../../redux/auth-reducer\";\r\n\r\n\r\nclass HeaderContainer extends Component { //Контейнерная компонента дает логику презентационной компоненте\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.authReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        logout: () => {\r\n            dispatch(logoutTC())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer)","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControl/FormsControls\";\r\nimport {maxLength, requiredField} from \"../../utils/validators/validators\";\r\nimport styles from '../common/FormsControl/FormsControl.module.css'\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nconst LoginForm = (props) => {\r\n    //props.handleSubmit предотвращает стандартное поведение button-a (перезагрузку страницы и отправку данных формы. Также этот коллбэк собирает все данные формы в один объект и отправляет их в\r\n    //качестве аргумента в props.onSubmit(formData)\r\n    //функцию props.onSubmit мы должны передать из верхней компоненты в качестве отдельного пропса, поэтому логику обработки формы мы будем держать во внешнем мире\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'} name={'email'} component={Input} validate={[maxLength30, requiredField]}\r\n                       typeField={'Input'}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'} name={'password'} component={Input}\r\n                       validate={[maxLength30, requiredField]} typeField={'Input'} type={'password'}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\" name={'rememberMe'} component={'input'}/> Remember me\r\n            </div>\r\n            {props.captcha && <div>\r\n                <img src={props.captcha} alt=\"captcha\"/>\r\n                <Field typeField={'Input'} name={'captcha'} component={Input} placeholder={'Enter captcha symbols'} validate={[requiredField]}/>\r\n            </div>}\r\n            {props.error && <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n/*\r\nconst ReduxLoginForm = reduxForm({form:'login'})(LoginForm)\r\nexport default ReduxLoginForm\r\n\r\n */\r\n\r\nexport default compose(\r\n    reduxForm({form: 'login'}) //reduxForm возвращает нам hoc. Для настройки hoc-a мы должны передать в функцию reduxForm объект со свойством form, значением которого будет название обрабатываемой формы. Оно должно быть уникально\r\n)(LoginForm) //когда мы обернем нашу форму hoc-om, который вернет reduxForm, то обернутой компоненте в пропсы поступит много параметров, нам интересен handleSubmit.\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport {signInTC} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        console.log(formData);\r\n        props.signIn(formData)\r\n    }\r\n\r\n    if (props.isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth,\r\n        captcha: state.authReducer.captchaURL\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signIn(loginData) {\r\n            dispatch(signInTC(loginData))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\r\n\r\n","import {getAuthUserDataTC} from \"./auth-reducer\";\r\n\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializingSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeAppTC = () => dispatch => {\r\n    const promise = dispatch(getAuthUserDataTC()) /// !!! getAuthUserDataTC() вернул нам Promise (точнее не сам getAuthReducer, а dispatch(setUserData()), поэтому мы можем делать асинхронные операции\r\n    Promise.all([promise]) // Promise.all = передаем массив, состоящий из промисов. Пока все промисы не выполнятся, то дальнейшие операции не пойдут\r\n        .then(() => dispatch(initializingSuccess()))\r\n}","const initiateState = [\r\n    {\r\n        id: \"1\",\r\n        name: 'Dimych',\r\n        imgSrc: 'https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png'\r\n    },\r\n    {id: \"2\", name: 'Андрей', imgSrc: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png'},\r\n    {id: \"3\", name: 'Михалыч', imgSrc: 'https://imgur.com/I80W1Q0.png'},\r\n    {id: \"4\", name: 'Витек', imgSrc: 'https://image.freepik.com/free-vector/_9385-36.jpg'}]\r\n\r\nconst sidebarReducer = (state = initiateState, action) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst reducersButch = combineReducers({ //Склеиваем наши reducers в одну кучу\r\n    dialogsPage: dialogsReducer,  //Название свойства - это компонента в _state. Значение - reducer, который отвечает за обработку этой страницы.\r\n    profilePage: profileReducer,\r\n    sideBar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    authReducer, //можно сразу же использовать название reducer-a\r\n    form: formReducer, //Для reducer-a redux-form свойство должно быть указано как form, т.к. в дальнейшем эта библиотека будет искать именно его\r\n    appReducer\r\n})\r\n\r\nlet store = createStore(reducersButch,  composeEnhancers(applyMiddleware(thunk)))\r\n\r\nWindow.prototype.store = store\r\n\r\n//Создаем Store. getState, dispatch, callSubscriber - все это уже будет сидеть внутри store и будет его внутренними методами.\r\n//Автоматически создается state, который будет включать в себя свойства, которые мы передаем в reducersButch.\r\n/*\r\nТ.е. сейчас мы сделали:\r\nstore = {\r\n    state: {\r\n        dialogsPage: ...,\r\n        profilePage: ...\r\n        и дальнейшее перечисление свойств объекта, который мы передаем в combineReducers\r\n    },\r\n    dispatch: {\r\n    this.state.profilePage = profileReducer(this.state.profilePage, action);\r\n    this.state.dialogsPage = dialogsReducer(this.state.dialogsPage, action);\r\n    и д.р.....\r\n    },\r\n    getState(){...},\r\n    callSubscriber(){...} и д.р.\r\n\r\n}\r\nПроблем в том, что наши свойства (dialogsPage, profilePage и т.д.) не имеют начальных значений. Поэтому начальное значение мы должны указать в соответсвющих Resucer-ax\r\n(для dialogPage указываем значение state в dialogReducer и т.д.).\r\nЧто будет происходить? При вызове функции createStore наш Redux начинает отправлять всем reducer-am по порядку внутренние action-s.\r\nТ.к. action.type, который отправляет Redux не будет найден, то reducer вернет значение state, который мы указываем в качестве initial state у каждого reducer-a.\r\nТаким образом redux склеит наш общий state из кусочков initialState у каждого из reducer-oв.\r\n\r\nИменно поэтому для каждой страницы мы должны создавать свой собственный reducer.\r\n\r\n */\r\n\r\nexport default store","import React from 'react';\r\nimport './App.css'\r\nimport Nav from \"./components/nav/Nav\";\r\nimport Settings from \"./components/settings/Settings\";\r\nimport News from \"./components/news/News\";\r\nimport {BrowserRouter, HashRouter, Route} from \"react-router-dom\"; //Используем browserRouter\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeAppTC} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store from \"./redux/redux-store\";\r\n\r\n//import DialogsContainer from \"./components/dialogs/DialogsContainer\";\r\n//import ProfileContainer from \"./components/profile/ProfileContainer\";\r\nconst DialogsContainer = React.lazy(() => import('./components/dialogs/DialogsContainer')) //React.lazy - позволяет нам загружать страницы не сразу, а только по мере обращения к ним\r\nconst ProfileContainer = React.lazy(() => import('./components/profile/ProfileContainer')) //Компоненту, которую мы \"лениво\" загружаем нужно обернуть в <React.Suspense fallback={<div>Loading...</div>}>\r\n    //В fallback мы пишем компоненту (иили просто какой-либо текст или div или страницу), которая будет показываться, пока идет загрузка компоненты\r\n    //Можно обернуть сразу несколько компонент\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp() //Делаем инициализацию приложения, чтобы все нужные пропсы пришли до отрисовки приложения\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader className='full'/>\r\n        } else {\r\n            return (\r\n                <div className=\"app-wrapper\">\r\n                    <HeaderContainer/>\r\n                    <Nav/>\r\n                    <div className=\"app-wrapper-content\">\r\n                        <React.Suspense fallback={<Preloader/>}>\r\n                            <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                            <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                            <Route path='/users' render={() => <UsersContainer/>}/>\r\n                            <Route path='/news' render={() => <News/>}/>\r\n                            <Route path='/settings' render={() => <Settings/>}/>\r\n                            <Route path='/login' render={() => <LoginPage/>}/>\r\n                        </React.Suspense>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n//Компонента Route - встроенная react компонента. Она следит за изменением url и, если url изменился, то отображает компоненту, которую мы указываем в render\r\n//Как именно меняется браузерная строка для Route не важно. Важно лишь то, что она изменилась. Если Адресная строка изменилась и больше не соответствует значению render,\r\n//то route уничтожает информацию, которую мы отображали ранее\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        initialized: state.appReducer.initialized\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        initializeApp: () => {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }\r\n}\r\n\r\nlet ComposedApp = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(App)\r\n\r\nexport const MainApp = (props) => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <ComposedApp/>\r\n            </Provider>\r\n        </HashRouter>)\r\n}\r\n","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {MainApp} from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <MainApp/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n/*\r\nstore.subscribe(() => {\r\n    reRenderDOM()\r\n}) - с введением connect стало неактуально\r\n\r\n */\r\n\r\n/*\r\n<Provider store={store}>\r\n   <App/>\r\n</Provider> // - Оборачиваем компоненту Provider-om, таким образом то, что мы передаем в провайдер (store={store}) будет доступно для всех дочерних компонент.\r\n */\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const requiredField = value => { // в value нам будут приходить значания textarea или input-a, куда мы вводим текст\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'Field is required'\r\n    }\r\n}\r\n\r\nexport const maxLength = length => value => { //Создаем замыкание для создания валидации различных maxLength. Для создания нужной maxLength создаем переменную за пределами компоненты. Эта переменная будет равна вызову функции с нужным нам параметром\r\n    if (value && value.length > length){\r\n        return `Max length is ${length} symbols`\r\n    } else {\r\n        return undefined\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport preloader from \"../../../assets/img/Spinner-1s-200px.svg\";\r\n\r\nfunction Preloader(props) {\r\n    return (\r\n        <>\r\n            <img src={preloader}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__14JJY\",\"error\":\"FormsControl_error__12-sw\",\"formSummaryError\":\"FormsControl_formSummaryError__21I_j\"};","import React from \"react\";\r\nimport styles from \"./FormsControl.module.css\"\r\n\r\nconst FormControl = ({input, meta, ...props}) => { //Что сделали с пропсами? При передаче компоненты в свойсво component компоненты Field в переданную компоненту (TextArea)\r\n    //приходят объект props, в котором есть свойства input и meta. Мы деструктуризировали наши пропсы и обозначили переменные, которые в дальнейшем передали в TextArea для обработки\r\n    //...props - будет включать в себя все пропсы, за исключением input и meta\r\n    const hasError = (meta.error && meta.touched)\r\n    return (\r\n        <div className={hasError && `${styles.formControl} ${styles.error}`}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            <div>\r\n                {hasError &&<span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n    //{...props} - дальнейшая деструктуризация для того, чтобы мы могли прокинуть отдельные пропсы в компоненту (такие как placeholder и д.р)\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1CfP6\",\"selectedPage\":\"Users_selectedPage__3GU18\",\"pages\":\"Users_pages__1wAue\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2lDem\",\"loginBlock\":\"Header_loginBlock__3A5kA\",\"logout\":\"Header_logout__3A-tt\"};","import {profileAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = '@@auth-reducer/ADD-POST';\r\nconst SET_USER_PROFILE = '@@auth-reducer/SET_USER_PROFILE';\r\nconst SET_USER_PROFILE_STATUS = '@@auth-reducer/SET_USER_PROFILE_STATUS'\r\nconst DELETE_POST = '@@auth-reducer/DELETE_POST'\r\nconst SAVE_PHOTOS_SUCCESS = '@@auth-reducer/SAVE_PHOTOS_SUCCESS'\r\n\r\nconst initialState = {\r\n    postData: [\r\n        {id: 1, message: 'Hi, how are you?', likes: 300},\r\n        {id: 2, message: \"It's my first post\", likes: 20}\r\n    ],\r\n    profile: null,\r\n    profileStatus: null\r\n} // добавляем значение state по умолчанию, оно нужно для инициализации state при запуске приложения. Иначе state будет undefined и наш store не создастся\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost = {\r\n                id: 3, message: action.newPostText, likes: 0\r\n            };\r\n\r\n            return {\r\n                ...state, //делаем спред-оператором поверхностную копию объекта. Теперь мы можем переопределять примитивные значения (такие, как newPostText). При этом\r\n                //мы также получаем в этом массиве и другие объекты, но они не будут представлять собой копию, т.к. хранятся по ссылке.\r\n                postData: [...state.postData, newPost], //Тут мы смотрим, что конкретно будет изменять наш Reducer, основываясь на action.Type. Конкретно в этом случае мы добавляем пост, потому логично, что будет меняться массив с постами.\r\n                //Для того, чтобы мы могли отследить изменения объекта, делаем копию массива PostData и в новый массив мы добавляем newPostText (то же, что и arr.push(newPostText))\r\n                //Теперь у нас есть копия массива PostData, однако элементы этого массива также представляют собой объекты.\r\n                //Копировать конкретно эти объекты нам не требуется, т.к. мы не предполагаем их изменения. Но, если, например, у нас добавится функционал по редактированию постов, то мы должны будем сделать копию и этих постов.\r\n            }\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n\r\n        case SET_USER_PROFILE_STATUS: {\r\n            return {\r\n                ...state, profileStatus: action.status\r\n            }\r\n        }\r\n\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state, postData: state.postData.filter(post => post.id !== action.postId)\r\n            }\r\n        }\r\n\r\n        case SAVE_PHOTOS_SUCCESS: {\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\n\r\n///Action Creators///\r\nexport const addPostActionCreator = (newPostText) => ({type: ADD_POST, newPostText});\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile})\r\nexport const setUserProfileStatus = (status) => ({type: SET_USER_PROFILE_STATUS, status})\r\nexport const deletePost = (postId) => ({type: DELETE_POST, postId})\r\nexport const savePhotoSuccess = (photos) => ({type: SAVE_PHOTOS_SUCCESS, photos})\r\n\r\n///Thunks///\r\n\r\nexport const setProfileTC = (userId) => async dispatch => {\r\n    let data = await profileAPI.setProfile(userId)\r\n    dispatch(setUserProfile(data))\r\n}\r\n\r\nexport const getProfileStatusTC = (userId) => async dispatch => {\r\n    const status = await profileAPI.getStatus(userId)\r\n    dispatch(setUserProfileStatus(status))\r\n}\r\n\r\nexport const updateProfileStatusTC = (status) => async dispatch => {\r\n    const data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(setUserProfileStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhotoTC = (file) => async dispatch => {\r\n    let response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfileTC = (profileData) => async (dispatch, getState) => {\r\n    const userId = getState().authReducer.id\r\n    let response = await profileAPI.saveProfile(profileData)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setProfileTC(userId))\r\n    } else {\r\n        dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}))\r\n    }\r\n\r\n}"],"sourceRoot":""}