{"version":3,"sources":["hoc/withAuthRedirect.js","components/profile/myPosts/profileInfo/ProfileInfo.module.css","components/profile/myPosts/post/Post.module.css","components/profile/ProfileStatusWithHooks.jsx","components/profile/Contacts.jsx","components/profile/ProfileData.jsx","components/profile/ProfileDataForm.jsx","components/profile/myPosts/profileInfo/ProfileInfo.jsx","components/profile/myPosts/post/Post.jsx","components/profile/myPosts/AddPost.jsx","components/profile/myPosts/MyPostsContainer.jsx","components/profile/Profile.jsx","components/profile/ProfileContainer.jsx"],"names":["withAuthRedirect","Component","RedirectComponent","this","props","isAuth","to","React","connect","state","authReducer","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","profileStatus","setProfileStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateUserStatus","value","onChange","event","text","target","type","Contact","style","marginLeft","contactTitle","contactValue","ProfileData","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","contact","ind","key","isOwner","onClick","changeEditMode","compose","reduxForm","form","onSubmit","handleSubmit","error","className","styles","formSummaryError","Field","name","placeholder","component","Input","validate","requiredField","Textarea","ProfileInfo","Preloader","profileImage","src","alt","photos","small","userPhoto","mainPhoto","e","files","length","savePhoto","initialValues","formData","saveProfile","Post","item","message","like","maxLength10","maxLength","postsData","profilePage","postData","dispatch","addPost","newPostText","action","addPostActionCreator","postElements","el","index","likes","Profile","ProfileContainer","userId","match","params","authorizedUserId","setProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","id","setProfileTC","getProfileStatusTC","status","updateProfileStatusTC","file","savePhotoTC","profileData","saveProfileTC","withRouter"],"mappings":"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","file":"static/js/3.d5a7de92.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n            isAuth: state.authReducer.isAuth\r\n        }\r\n    }\r\n\r\n    class RedirectComponent extends React.Component { //Создаем классовый (можно функциональный компонент, который нам вернет HOC\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to={'/login'}/> //В зависимости от props вернем либо редирект\r\n            }\r\n            return <Component {...this.props}/> //либо компонент, который мы передаем в качестве аргумента для HOC.\r\n        }\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToProps, {})(RedirectComponent) //Оборачиваем RedirectComponent connect-om для доступа к props из state\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImage\":\"ProfileInfo_profileImage__Z8WVx\",\"mainPhoto\":\"ProfileInfo_mainPhoto__22hmD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__AsE_b\"};","import React, {useEffect, useState} from \"react\";\r\nimport styles from './Profile.module.css'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    /*\r\n    Хуки нельзя использовать в условиях:\r\n    if(props.profileStatus === 'something){\r\n        const [editMode, setEditMode] = useState(false) -НЕЛЬЗЯ\r\n        }\r\n\r\n     Нельзя испольовать в циклах\r\n     */\r\n\r\n\r\n    //useState(false) //хук useState возвращает нам массив из 2-х элементов. 1-й элемент - параметр, который мы передаем в качестве аргумента в useState. Этот параметр устанавливает initialState компоненты. Второй параметр - функция, которая изменяет первый параметр.\r\n    const [editMode, setEditMode] = useState(false) //деструктурирующим присваиванием получаем наш initial state и функцию, которой мы будем менять стейт\r\n    const [profileStatus, setProfileStatus] = useState(props.profileStatus)\r\n\r\n    useEffect(()=>{\r\n        setProfileStatus(props.profileStatus)\r\n    }, [props.profileStatus])\r\n    //если не передаем второй параметр (массив с зависомостями), то выполняется после каждой отрисовки.\r\n    // если передаем вторым параметром пустой массив, то выполнится один раз после вмотирования в dom\r\n    //useEffect выполняется, когда будет завершена отрисовка страницы, когда она уже будет вмонтирована в dom\r\n    //вторым параметром для useEffect мы передаем массив, элементами которого будут являться зависимости, т.е. то, что будет триггером для срабатывания useEffect.\r\n    //useEffect будет срабатывать только тогда, когда каждая конкретная зависимость не будет равна своему значению из предыдущего рендера.\r\n    //Например, нам пришел props.profileStatus === ''\r\n    //После первого рендера страницы будет запущен useState, т.к. мы устанавливаем первоначальную инициализацию profileStatus.\r\n    //В дальнейшем useEffect будет срабатывать только при изменении props.profileStatus, конкретно в нашем случае после вызова функции deactivateEditMode\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        props.updateUserStatus(profileStatus)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        let text = event.target.value\r\n        setProfileStatus(text)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && <div>\r\n                <span onDoubleClick={() => activateEditMode()}>Status: {props.profileStatus || '-------'}</span>\r\n            </div>}\r\n            {editMode && <div>\r\n                <input autoFocus={true} onBlur={()=> deactivateEditMode()} value={profileStatus} onChange={onStatusChange} type=\"text\"/>\r\n            </div>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\n\r\nconst Contact = (props) => {\r\n    return (\r\n        <div style={{marginLeft:'20px'}}>\r\n            <b>{props.contactTitle}</b>: {props.contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from \"react\";\r\nimport Contact from \"./Contacts\";\r\n\r\nconst ProfileData = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <p>Name: {props.profile.fullName}</p>\r\n            <div>\r\n                <div><b>Looking for a job:</b> {props.profile.lookingForAJob ? 'yes' : 'nope'} </div>\r\n                <div>\r\n                    <b>My professional skills:</b> {props.profile.lookingForAJobDescription}\r\n                </div>\r\n                <div><b>About me:</b>{props.profile.aboutMe}</div>\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(props.profile.contacts).map((contact, ind) => {\r\n                return <Contact key={contact} contactTitle={contact}\r\n                                contactValue={props.profile.contacts[contact]}/>\r\n            })}\r\n            </div>\r\n            {props.isOwner && <button onClick={()=>props.changeEditMode(true)}>edit</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../common/FormsControl/FormsControls\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport styles from \"../common/FormsControl/FormsControl.module.css\";\r\n\r\nconst ProfileDataForm = (props) => {\r\n    /*\r\n    В качестве props в компоненту поступают initialValues, т.к. их структура и структура name в форме (name={'fullName'} name={'lookingForAJob'} и т.д.)\r\n    совпадают, то начальные значения в форме будут равны значениям props.profile\r\n     */\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {props.error && <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <p>Name:</p> <Field name={'fullName'} placeholder='Введите имя' component={Input} validate={[requiredField]}/>\r\n            <div>\r\n                <div>\r\n                    <b>Looking for a job:</b> <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/>\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills:</b> <Field name={'lookingForAJobDescription'} placeholder='Ваши навыки' component={Textarea}/>\r\n                </div>\r\n                <div><b>About me:</b><Field name={'aboutMe'} placeholder='Напишите текст о вас' component={Textarea}/></div>\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(props.profile.contacts).map((contact, ind) => {\r\n                return <div style={{marginLeft:'20px'}} key={ind}>\r\n                    <b>{contact}</b> <Field placeholder={contact} name={`contacts.${contact}`} component={Input}/>\r\n                </div>\r\n            })}\r\n            </div>\r\n            <button>save</button>\r\n            <button type={\"button\"} onClick={()=>props.changeEditMode(false)}>close</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default compose(\r\n    reduxForm({form:'edit-profile'})\r\n)(ProfileDataForm)","import React, {useState} from \"react\";\r\nimport styles from './ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"../../ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../../assets/img/user.jpeg\";\r\nimport ProfileData from \"../../ProfileData\";\r\nimport ProfileDataForm from \"../../ProfileDataForm\";\r\nimport Contact from \"../../Contacts\";\r\n\r\nconst ProfileInfo = props => { //Все, что нужно компоненте не импортируется, не берется из глобала, а поступает из пропсов\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img className={styles.profileImage}\r\n                 src=\"https://process.images.nathab.com/A6dTpd53SmIg0pBfJJhgAz/resize=width:864/quality=value:60/cache=expiry:31536000/compress/https://www.nathab.com/uploaded-files/carousels/HERO/South-America/83-ALT.jpg\"\r\n                 alt=\"IMG\"/>\r\n            <img src={props.profile.photos.small || userPhoto} alt=\"photo\" className={styles.mainPhoto}/>\r\n            {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n            {editMode\r\n                ? <ProfileDataForm initialValues={props.profile} profile={props.profile} isOwner={props.isOwner} changeEditMode={setEditMode} onSubmit={onSubmit}/>\r\n                : <ProfileData profile={props.profile} isOwner={props.isOwner} changeEditMode={setEditMode}/>}\r\n            <ProfileStatusWithHooks profileStatus={props.profileStatus} updateUserStatus={props.updateUserStatus}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport styles from \"./Post.module.css\"\r\n\r\nfunction Post(props) {\r\n    return (\r\n        <div className={styles.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRsLfGk8cfZYn-FlJfh4I9rPP656klMZAF6Og&usqp=CAU\"\r\n                alt=\"avatar\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>Like - {props.like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {compose} from \"redux\";\r\nimport {maxLength, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControls\";\r\n\r\nconst maxLength10 = maxLength(1000)\r\n\r\nconst AddPost = (props) => {\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field name={'newPostText'} placeholder='Enter your post' component={Textarea} validate={[maxLength10, requiredField]}>\r\n                    </Field>\r\n                </div>\r\n                <div>\r\n                    <button >Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default compose(\r\n    reduxForm({form:'addPost'})\r\n)(AddPost)","import React from \"react\"\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Post from \"./post/Post\";\r\nimport AddPost from \"./AddPost\";\r\n\r\nconst MyPostsContainer = props => {\r\n\r\n    const postElements = props.postsData.map((el, index) => <Post message={el.message}\r\n                                                                  like={el.likes} key={index}/>);\r\n\r\n    const onSubmit = (formData) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n            <AddPost onSubmit={onSubmit}/>\r\n            {postElements}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n     return {\r\n         postsData: state.profilePage.postData,\r\n     }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n     return {\r\n         addPost: (newPostText) => {\r\n             const action = addPostActionCreator(newPostText)\r\n             dispatch(action);\r\n         },\r\n     }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPostsContainer)","import React from \"react\";\r\nimport styles from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./myPosts/profileInfo/ProfileInfo\"\r\nimport MyPosts from \"./myPosts/MyPostsContainer\";\r\n\r\n\r\nfunction Profile(props) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} profileStatus={props.profileStatus} updateUserStatus={props.updateUserStatus} isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            <MyPosts />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {Component} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileStatusTC,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    setProfileTC,\r\n    updateProfileStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends Component { //Задача контейнерной компоненты - быть оберткой для презентационной компоненты.\r\n\r\n    refreshProfile(){\r\n        let userId = this.props.match.params.userId; //props.match.params.userId - эти пропсы нам добавляет HOC withRouter\r\n\r\n        if (!userId){\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n\r\n        this.props.setProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() { //Делаем ajax запросы в методе componentDidMount, т.к. получаение данных - асинхронный процесс. Если будем делать запрос на сервер до того, как наша компонента будет вмонтирована, то есть риск, что мы не сможем ничего отрисовать, например, из-зи проблем с сетью\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto} saveProfile={this.props.saveProfile}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        profileStatus: state.profilePage.profileStatus,\r\n        authorizedUserId: state.authReducer.id,\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setProfile: (userId) => {\r\n            dispatch(setProfileTC(userId))\r\n        },\r\n        getUserStatus: (userId) => {\r\n            dispatch(getProfileStatusTC(userId))\r\n        },\r\n        updateUserStatus: status => {\r\n            dispatch(updateProfileStatusTC(status))\r\n        },\r\n        savePhoto: (file) => {\r\n            dispatch(savePhotoTC(file))\r\n        },\r\n        saveProfile: (profileData) => {\r\n            dispatch(saveProfileTC(profileData))\r\n        }\r\n    }\r\n}\r\n\r\n// withRouter(ProfileContainer); вернет нам новую компоненту, в props которой добавятся объекты\r\n// match, location, history, staticContext\r\n\r\n/*\r\nlocation:\r\n    hash: \"\"\r\n    key: \"sxa9ph\"\r\n    pathname: \"/profile/11722\"\r\n    search: \"\"\r\n    state: null\r\n\r\nmatch: - показывает совпадение url с какими-либо Route path. В нашем случае было найдено совпадение с <Route path='/profile'\r\n    isExact: false (или true) - совпал ли адрес в url строке точно. Т.к. наш path - \"/profile/11722\", то значение false\r\n    params: {11722} - сюда нам приходят параметры, которые указаны у Route path='/profile/: после двоеточия\r\n    path: \"/profile\"\r\n    url: \"/profile\"\r\n */\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect)\r\n(ProfileContainer)\r\n"],"sourceRoot":""}