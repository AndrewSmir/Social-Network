{"version":3,"sources":["components/dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/dialogs/dialogItem/DialogItem.jsx","components/dialogs/message/Message.jsx","components/dialogs/NewMessage.jsx","components/dialogs/Dialogs.jsx","components/dialogs/DialogsContainer.jsx"],"names":["module","exports","withAuthRedirect","Component","RedirectComponent","this","props","isAuth","to","React","connect","state","authReducer","DialogItem","path","id","className","styles","dialog","active","src","imgSrc","alt","name","Message","message","maxLength50","maxLength","compose","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","cols","rows","placeholder","validate","requiredField","Dialogs","dialogPerson","dialogsPage","dialogsData","map","person","messageFromPerson","messagesData","dialogs","dialogItems","messages","formData","addMessage","newMessageText","dispatch","newMessage","action","addMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,0B,sICG7HC,EAAmB,SAACC,GAE7B,IAMMC,EARqC,uKAUnC,OAAKC,KAAKC,MAAMC,OAGT,kBAACJ,EAAcE,KAAKC,OAFhB,kBAAC,IAAD,CAAUE,GAAI,eAXU,GAQXC,IAAMN,WAWtC,OAFuCO,aAff,SAACC,GACrB,MAAO,CACHJ,OAAQI,EAAMC,YAAYL,UAa8B,GAAzBG,CAA6BN,K,+FCTzDS,EARI,SAACP,GAChB,IAAIQ,EAAI,mBAAeR,EAAMS,IAE7B,OACQ,wBAAIC,UAAS,UAAKC,IAAOC,OAAZ,YAAsBD,IAAOE,SAAU,yBAAKC,IAAKd,EAAMe,OAAQC,IAAI,QAAO,kBAAC,IAAD,CAASd,GAAIM,GAAOR,EAAMiB,QCC9GC,EANC,SAAClB,GACb,OACI,yBAAKU,UAAWC,IAAOQ,SAAUnB,EAAMmB,U,yCCCzCC,EAAcC,YAAU,IAYfC,cACXC,YAAU,CAACC,KAAK,qBADLF,EAVI,SAACtB,GAChB,OACI,0BAAMyB,SAAUzB,EAAM0B,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAK,MAAMC,KAAK,IAAIC,YAAY,oGAAoBf,KAAM,iBAAkBgB,SAAU,CAACb,EAAac,OAChI,6BACA,oDCiBGC,EAxBC,SAACnC,GAEb,IAAMoC,EAAepC,EAAMqC,YAAYC,YAAYC,KAAI,SAAAC,GAAM,OAAG,kBAAC,EAAD,CAAYvB,KAAMuB,EAAOvB,KAAMR,GAAI+B,EAAO/B,GAAIM,OAAQyB,EAAOzB,YACvH0B,EAAoBzC,EAAMqC,YAAYK,aAAaH,KAAI,SAAApB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,aAMlG,OACI,yBAAKT,UAAWC,IAAOgC,SACnB,yBAAKjC,UAAWC,IAAOiC,aACnB,4BACCR,IAGL,yBAAK1B,UAAWC,IAAOkC,UAClBJ,EACD,kBAAC,EAAD,CAAYhB,SAbL,SAACqB,GAChB9C,EAAM+C,WAAWD,EAASE,sB,iBCUnB1B,sBAAQlB,aAfC,SAACC,GACrB,MAAO,CACHgC,YAAahC,EAAMgC,gBAIA,SAACY,GACxB,MAAO,CACHF,WAAY,SAACG,GACT,IAAMC,EAASC,YAAwBF,GACvCD,EAASE,QAKgDvD,IAAtD0B,CAAwEa","file":"static/js/4.d06d3878.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__29qsr\",\"dialogItems\":\"Dialogs_dialogItems__1nI3i\",\"active\":\"Dialogs_active__2nIfR\",\"dialog\":\"Dialogs_dialog__2LcSY\"};","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n            isAuth: state.authReducer.isAuth\r\n        }\r\n    }\r\n\r\n    class RedirectComponent extends React.Component { //Создаем классовый (можно функциональный компонент, который нам вернет HOC\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to={'/login'}/> //В зависимости от props вернем либо редирект\r\n            }\r\n            return <Component {...this.props}/> //либо компонент, который мы передаем в качестве аргумента для HOC.\r\n        }\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToProps, {})(RedirectComponent) //Оборачиваем RedirectComponent connect-om для доступа к props из state\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = `/dialogs/${props.id}`\r\n\r\n    return (\r\n            <li className={`${styles.dialog} ${styles.active}`}><img src={props.imgSrc} alt=\"Ava\"/><NavLink to={path}>{props.name}</NavLink></li>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\"\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {compose} from \"redux\";\r\nimport {Textarea} from \"../common/FormsControl/FormsControls\";\r\nimport {maxLength, requiredField} from \"../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLength(50)\r\n\r\nconst NewMessage = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} cols=\"100\" rows=\"5\" placeholder='Введите сообщение' name={'newMessageText'} validate={[maxLength50, requiredField]}></Field>\r\n            <br/>\r\n            <button>Send Message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default compose(\r\n    reduxForm({form:'newDialogMessage'})\r\n)(NewMessage)","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./dialogItem/DialogItem\";\r\nimport Message from \"./message/Message\";\r\nimport NewMessage from \"./NewMessage\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    const dialogPerson = props.dialogsPage.dialogsData.map(person=> <DialogItem name={person.name} id={person.id} imgSrc={person.imgSrc}/>);\r\n    const messageFromPerson = props.dialogsPage.messagesData.map(message => <Message message={message.message}/>);\r\n\r\n    const addMessage = (formData) => {\r\n        props.addMessage(formData.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogItems}>\r\n                <ul>\r\n                {dialogPerson}\r\n                </ul>\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messageFromPerson}\r\n                <NewMessage onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {addMessageActionCreator, changeNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => { // connect (функция в самом низу) позволяет нам автоматически вытаскивать state из store. Т.е. он неявно вызывает store.getState() и возвращает нам актуальный state\r\n    return {\r\n        dialogsPage: state.dialogsPage, //Сюда мы передаем то, что будет указано у нас в качестве пропсов, которые мы передаем в презентационную компоненту. Т.е. в итоге мы полчим презентационную компоненту с пропсами <Dialogs dialogsPage={state.dialogsPage} />\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => { //сюда connect вытащит из нашего store dispatch - т.е. то, где мы обрабатываем наши reducer-ы\r\n    return {\r\n        addMessage: (newMessage) => { //Сюда мы передаем функцию, которая будет передана в качестве props в презентационную компоненту. Т.е. в итоге мы получим <Dialogs addMessage={тело нашей функции (которое передаем в качестве значения свойства addMessage} />\r\n            const action = addMessageActionCreator(newMessage) //формируем объект Action, чтобы мы могли понять, какую часть store будем менять\r\n            dispatch(action) //dispatch передает action всем нашим reducer-am попорядку, если action удовлетворит условию, то profile-reducer вернет нам новый state\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)\r\n\r\n//С помощью функции connect мы можем создать контейнерную компоненту.\r\n//Функция connect принимает в себя 2 параметра, которые представляют собой функции\r\n//Первая функция принимает в качестве параметров state (Обычно эту функцию называют mapStateToProps)\r\n//Вторая функция - dispatch (Обычно называют mapDispatchToProps)\r\n//В результате connect вернет нам функцию, которая в качестве параметра принимает в себя название компоненты,\r\n//вокруг которой мы хотим создать контейнерную компоненту.\r\n\r\n/*\r\nПомимо всего этого connect создает свой собственный subscribe, который будет следить, нужно ли компоненте перерисовываться или нет.\r\nКаждый раз, когда происходят изменения в state запускается функция mapStateToProps и формируется новый объект.\r\nновый объект сравнивается со старым объектом (его внутренние составляющие, т.к. объект не может быть равен другому объекту).\r\nЕсли ичего не меняется, то и компонента не перерисовывается\r\n */\r\n"],"sourceRoot":""}